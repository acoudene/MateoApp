@page "/dictations"

<div class="container-fluid">
  <h2>Ecris en nombre <span class="badge badge-secondary">@(MathHelper.IntToFr(MandatoryValue))</span> :</h2>
  <div class="container">
    <div class="row">
      <div class="col-sm-2">
        <input type="number" id="result" class="form-control mb-2" @bind="GivenValue" />
      </div>
      <div class="col-sm-auto">
        <button class="btn btn-primary mb-2">Valider</button>
      </div>
    </div>

    <div id="result" class="@(GivenValue.HasValue?string.Empty:"collapse")">
      <div class="row">
        <div class="col-sm-auto">
          <div class="alert @(Result.HasValue && Result.Value ?"alert-success":"alert-warning")" role="alert">
            <p>@(Result.HasValue && Result.Value ? "Super, c'est juste !" : $"Refais ton calcul, la réponse est {MandatoryValue} !")</p>
          </div>
        </div>
        <div class="col-sm-auto">
          <button class="btn btn-primary mb-2" @onclick="Next">Continuer</button>
        </div>
      </div>
    </div>
  </div>
</div>
@code {
  private int MandatoryValue { get; set; }
  private int? GivenValue { get; set; }
  private bool? _result = null;

  [Parameter]
  public bool? Result
  {
    get
    {
      _result = null;
      if (GivenValue.HasValue) _result = MandatoryValue == GivenValue.Value;
      return _result;
    }
    set
    {
      _result = value;
    }
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    Init();
  }

  private void Init()
  {
    GivenValue = null;
    MandatoryValue = new Random().Next(0, 100);
  }

  private void Next()
  {
    Init();
  }
}
